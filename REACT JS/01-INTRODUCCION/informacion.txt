¬øQu√© es React?
React es una biblioteca Javascript para crear interfaces de usuario.
React no es un framework (a diferencia de Angular o Vue, que tienen m√°s opiniones).
React es un proyecto de c√≥digo abierto creado por Facebook.
Est√° basado en componentes.

[getting-started-with-react](https://www.taniarascia.com/getting-started-with-react/)

Uno de los aspectos m√°s importantes de React es el hecho de que puede crear componentes, que son como elementos HTML personalizados y reutilizables, para construir interfaces de usuario de manera r√°pida y eficiente. React tambi√©n agiliza la forma en que se almacenan y manejan los datos, utilizando el estado y los accesorios.

#Requisitos

node js (opens new window): es un entorno en tiempo de ejecuci√≥n multiplataforma, de c√≥digo abierto, para la capa del servidor (pero no limit√°ndose a ello) basado en el lenguaje de programaci√≥n JavaScript.

npm (opens new window): NPM (Node Package Manager) es un gestor de paquetes desarrollado en su totalidad bajo el lenguaje JavaScript por Isaac Schlueter, a trav√©s del cual podemos obtener cualquier librer√≠a con tan solo una sencilla l√≠nea de c√≥digo, lo cual nos permitir√° agregar dependencias de forma simple, distribuir paquetes y administrar eficazmente tanto los m√≥dulos como el proyecto a desarrollar en general.

 fuente: https://openwebinars.net/blog/que-es-node-package-manager/

 ¬øQu√© es un m√≥dulo?

Un m√≥dulo no es nada m√°s que una unidad de c√≥digo organizado en archivos o directorios, la cual puede ser exportada con facilidad para poder reutilizarse en otras partes de la aplicaci√≥n.
fuente: https://alvaroperdiz.com/javascript/node-js/sistema-modulos/

External modules: Son, en esencia, los paquetes de terceros distribuidos a trav√©s de npm (aunque pueden provenir de otros repositorios). Estos paquetes se instalan como dependencias y, aunque aportan funcionalidad a la aplicaci√≥n, no deben incluirse en el repositorio ya que no son parte de la misma.

create-react-app
create-react-app https://create-react-app.dev/ 
Afortunadamente, Facebook ha creado la aplicaci√≥n Create React App, un entorno que viene preconfigurado con todo lo necesario para crear una aplicaci√≥n React.
Crear√° un servidor de desarrollo en vivo.
No es necesario instalar ni configurar herramientas como webpack o Babel. Est√°n preconfigurados y ocultos para que pueda concentrarse en el c√≥digo.
Ventaja: enfocarse en el c√≥digo, no en las herramientas de compilaci√≥n.

npx create-react-app my-app
cd my-app
npm start

npx

Npx es una herramienta de cli que nos permite ejecutar paquetes de npm, los busca en su servidor y lo ejecuta en nuestra m√°quina.
Si usas npx no tienes que instalar paquetes de forma global.
Busca siempre la √∫ltima versi√≥n.

TIP

Si ha instalado previamente create-react-app globalmente a trav√©s de npm install -g create-react-app, le recomendamos que desinstale el paquete usando npm uninstall -g create-react-app o yarn global remove create-react-app para asegurarse de que npx siempre usa la √∫ltima versi√≥n.

Directorios
plublic: Archivos p√∫blicos
index.html -> <div id="root"></div>
src
index.js
#index.js

import React from 'react';
import ReactDOM from 'react-dom';

ReactDOM.render(
  <React.StrictMode>
    "bluuweb app"
  </React.StrictMode>,
  document.getElementById('root')
);

Modo estricto https://es.reactjs.org/docs/strict-mode.html StrictMode es una herramienta para destacar problemas potenciales en la aplicaci√≥n.

ReactDOM https://es.reactjs.org/docs/rendering-elements.html: React DOM se encarga de actualizar el DOM para igualar los elementos de React.

App.jsx
Crear archivo en src/App.jsx
ejecutar: _rafce

const App = () => {
    return (
        <div>
            bluuweb
        </div>
    )
}

export default App


JSX: JavaScript + XML
Como ha visto, hemos estado usando lo que parece HTML en nuestro c√≥digo React, pero no es HTML del todo. Esto es JSX , que significa JavaScript XML.
El uso de JSX no es obligatorio para escribir React.
Debajo del cap√≥, se est√° ejecutando createElement, lo que toma la etiqueta, las propiedades y los elementos secundarios del componente y muestra la misma informaci√≥n.
JSX est√° m√°s cerca de JavaScript, no de HTML, por lo que hay algunas diferencias clave a tener en cuenta al escribirlo.
className se usa en lugar de class para agregar clases CSS, ya que class es una palabra clave reservada en JavaScript.
Las propiedades y m√©todos en JSX son camelCase.
Las etiquetas de cierre autom√°tico deben terminar en una barra inclinada, p. Ej. <img />
Las expresiones de JavaScript tambi√©n se pueden incrustar dentro de JSX usando llaves, incluidas variables, funciones y propiedades.

const App = () => {
    const titulo = "Mi primera APP";
    return (
        <div className="container">
            <h1 className="text-primary">{titulo}</h1>
        </div>
    );
};

export default App;

const App = () => {
    const titulo = "Mi primera APP";
    const colores = {
        primary: "text-primary",
        info: "text-info",
        danger: "text-danger",
    };

    return (
        <div className="container">
            <h1 className={colores.primary}>{titulo}</h1>
        </div>
    );
};

export default App;

Renderizado condicional
condicional https://es.reactjs.org/docs/conditional-rendering.html: En React, puedes crear distintos componentes que encapsulan el comportamiento que necesitas. Entonces, puedes renderizar solamente algunos de ellos, dependiendo del estado de tu aplicaci√≥n.

const user = true;

const SaludoBienvenida = () => (
    <h2 className="text-warning">Bienvenido!</h2>
);

const SaludoDespedida = () => (
    <h2 className="text-secondary">Usuario offline</h2>
);

return (
    <div className="container">
        <h1 className={colores.primary}>{titulo}</h1>

        {user ? <SaludoBienvenida /> : <SaludoDespedida />}

    </div>
);

Listas y keys
https://es.reactjs.org/docs/lists-and-keys.html

const frutas = ["üçâ", "üçå", "üçì"];

    return (
        <div className="container">
            <h1 className={colores.primary}>{titulo}</h1>
            <ul>
                {frutas.map((fruta, i) => (
                    <li key={fruta}>
                        {i + 1} - {fruta}
                    </li>
                ))}
            </ul>
        </div>
    );

TIP

React usa el key prop para crear una relaci√≥n entre el componente y el elemento DOM.
La biblioteca utiliza esta relaci√≥n para determinar si el componente debe volver a renderizarse o no.
No se recomienda utilizar el √≠ndice de la matriz como key si sabe que la matriz no ser√° est√°tica.
Si key es un √≠ndice, reordenar un elemento en la matriz lo cambia. Entonces React se confundir√° y volver√° a renderizar el elemento incorrecto.

https://sentry.io/answers/unique-key-prop/

Manejando eventos
https://es.reactjs.org/docs/handling-events.html

Los eventos de React se nombran usando camelCase, en vez de min√∫sculas.
Con JSX pasas una funci√≥n como el manejador del evento, en vez de un string.
<button
    className="btn btn-primary"
    onClick={() => console.log("super!")}
>
    Click!
</button>

const saludoClick = () => console.log("Saludo!");

return (
    <div className="container">
        <button className="btn btn-primary" onClick={saludoClick}>
            Click!
        </button>
    </div>
);

Con par√°metros:

const saludoClick = (name) => {
    console.log("Saludo! " + name);
};

return (
    <div className="container">
        <button
            className="btn btn-primary"
            onClick={() => saludoClick("bluuweb")}
        >
            Click!
        </button>
    </div>
);

Componentes
Los componentes permiten separar la interfaz de usuario en piezas independientes, reutilizables y pensar en cada pieza de forma aislada.
components/Frutas.jsx

https://es.reactjs.org/docs/components-and-props.html

const Frutas = () => {
    const frutas = ["üçâ", "üçå", "üçì"];
    return (
        <div>
            <ul>
                {frutas.map((fruta, i) => (
                    <li key={fruta}>
                        {i + 1} - {fruta}
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default Frutas;

App.jsx

import Frutas from "./components/Frutas";

const App = () => {
    return <Frutas />;
};

export default App;

Fragmentos

fragment https://es.reactjs.org/docs/fragments.html: Un patr√≥n com√∫n en React es que un componente devuelva m√∫ltiples elementos. Los Fragmentos te permiten agrupar una lista de hijos sin agregar nodos extra al DOM.

import React from "react";
const Frutas = () => {
    const frutas = ["üçâ", "üçå", "üçì"];
    return (
        <React.Fragment>
            <ul>
                {frutas.map((fruta, i) => (
                    <li key={fruta}>
                        {i + 1} - {fruta}
                    </li>
                ))}
            </ul>
        </React.Fragment>
    );
};

export default Frutas;

const Frutas = () => {
    const frutas = ["üçâ", "üçå", "üçì"];
    return (
        <>
            <ul>
                {frutas.map((fruta, i) => (
                    <li key={fruta}>
                        {i + 1} - {fruta}
                    </li>
                ))}
            </ul>
        </>
    );
};

export default Frutas;

Reutilizar componentes:

import Frutas from "./components/Frutas";

const App = () => {
    return (
        <>
            <Frutas />
            <Frutas />
            <Frutas />
        </>
    );
};

export default App;

Props
Cuando React ve un elemento representando un componente definido por el usuario, pasa atributos JSX e hijos a este componente como un solo objeto. Llamamos a este objeto ‚Äúprops‚Äù (propiedades)
Son de solo lectura.

import Frutas from "./components/Frutas";

const App = () => {
    const frutas = ["üçâ", "üçå", "üçì"];
    return <Frutas frutas={frutas} />;
};

export default App;

const Frutas = (props) => {
    console.log(props);
    return (
        <>
            <ul>
                {props.frutas.map((fruta, i) => (
                    <li key={fruta}>
                        {i + 1} - {fruta}
                    </li>
                ))}
            </ul>
        </>
    );
};

export default Frutas;

React es bastante flexible pero tiene una sola regla estricta:

Todos los componentes de React deben actuar como funciones puras con respecto a sus props.
Tales funciones son llamadas ‚Äúpuras‚Äù porque no tratan de cambiar sus entradas, y siempre devuelven el mismo resultado para las mismas entradas.
Por supuesto, las interfaces de usuario de las aplicaciones son din√°micas y cambian con el tiempo. En la siguiente secci√≥n, introduciremos un nuevo concepto de ‚Äúestado‚Äù.

Estado

El estado le permite a los componentes de React cambiar su salida a lo largo del tiempo en respuesta a acciones del usuario, respuestas de red y cualquier otra cosa, sin violar la regla de arriba ‚òù.
state https://es.reactjs.org/docs/state-and-lifecycle.html
Para hacer cambios vamos a utilizar un hook.

Hooks
¬øQu√© pasa si hago esto?
const App = () => {
    let contador = 0;

    const aumentarContador = () => {
        contador++;
        console.log(contador);
    };

    return (
        <div className="container">
            <h1>{contador}</h1>
            <button className="btn btn-primary" onClick={aumentarContador}>
                Aumentar
            </button>
        </div>
    );
};

export default App;

Nada le indica a React que tenemos que volver a renderizar para pintar nuevamente contador.
Necesitamos un Hook que modifique el estado. (ahora con hooks es m√°s f√°cil)

hooks

hooks: https://es.reactjs.org/docs/hooks-overview.html
Los Hooks son funciones que te permiten ‚Äúenganchar‚Äù el estado de React y el ciclo de vida desde componentes de funci√≥n.
Los hooks no funcionan dentro de las clases ‚Äî te permiten usar React sin clases.
React proporciona algunos Hooks incorporados como useState.
Tambi√©n puedes crear tus propios Hooks para reutilizar el comportamiento con estado entre diferentes componentes.

useState

import { useState } from "react";

const Contador = () => {
    const [contador, setContador] = useState(0);

    const aumentarContador = () => {
        setContador(contador + 1);
    };

    return (
        <div className="container">
            <h1>{contador}</h1>
            <button className="btn btn-primary" onClick={aumentarContador}>
                Aumentar
            </button>
        </div>
    );
};

export default Contador;

¬øQu√© hace la llamada a useState?
Declara una ‚Äúvariable de estado‚Äù.
useState es una nueva forma de usar exactamente las mismas funciones que this.state nos da en una clase.
Normalmente, las variables ‚Äúdesaparecen‚Äù cuando se sale de la funci√≥n, pero las variables de estado son conservadas por React.
#¬øQu√© pasamos a useState como argumento?
El √∫nico argumento para el Hook useState() es el estado inicial.
#¬øQu√© devuelve useState?
Devuelve una pareja de valores: el estado actual y una funci√≥n que lo actualiza.
#Resumen:
Declaramos una variable de estado llamada contador y le asignamos a 0.
React recordar√° su valor actual entre re-renderizados, y devolver√° el valor m√°s reciente a nuestra funci√≥n.
Si se quiere actualizar el valor de contador actual, podemos llamar a setContador.
Cuando el usuario hace click, llamamos a setContador con un nuevo valor. React actualizar√° entonces el componente Contador pas√°ndole el nuevo valor de contador.
Nota los corchetes son intaxis de Javascript, se llama ‚Äúdesestructuraci√≥n de arrays‚Äù.



